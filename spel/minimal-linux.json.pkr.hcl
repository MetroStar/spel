# This file was autogenerated by the 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.

# All generated input variables will be of 'string' type as this is how Packer JSON
# views them; you can change their type later on. Read the variables type
# constraints documentation
# https://www.packer.io/docs/templates/hcl_templates/variables#type-constraints for more info.
variable "ami_force_deregister" {
  type    = string
  default = "false"
}

variable "ami_groups" {
  type    = string
  default = ""
}

variable "ami_regions" {
  type    = string
  default = ""
}

variable "ami_users" {
  type    = string
  default = ""
}

variable "aws_ec2_instance_type" {
  type    = string
  default = "t3.2xlarge"
}

variable "aws_instance_connect" {
  type    = string
  default = ""
}

variable "aws_region" {
  type    = string
  default = "us-east-1"
}

variable "azure_build_resource_group_name" {
  type    = string
  default = ""
}

variable "azure_client_id" {
  type    = string
  default = "${env("ARM_CLIENT_ID")}"
}

variable "azure_client_secret" {
  type    = string
  default = "${env("ARM_CLIENT_SECRET")}"
}

variable "azure_dest_resource_group" {
  type    = string
  default = ""
}

variable "azure_dest_storage_account" {
  type    = string
  default = ""
}

variable "azure_environment" {
  type    = string
  default = ""
}

variable "azure_execute_using_public_ip" {
  type    = string
  default = ""
}

variable "azure_location" {
  type    = string
  default = ""
}

variable "azure_source_image_centos7" {
  type    = string
  default = ""
}

variable "azure_source_image_resource_group_centos7" {
  type    = string
  default = ""
}

variable "azure_source_vhd_centos7" {
  type    = string
  default = ""
}

variable "azure_subnet_name" {
  type    = string
  default = ""
}

variable "azure_subscription_id" {
  type    = string
  default = "${env("ARM_SUBSCRIPTION_ID")}"
}

variable "azure_virtual_network_name" {
  type    = string
  default = ""
}

variable "azure_virtual_network_resource_group_name" {
  type    = string
  default = ""
}

variable "azure_vm_size" {
  type    = string
  default = "Standard_DS5_v2"
}

variable "iso_url_centos7" {
  type    = string
  default = "http://mirror.cs.vt.edu/pub/CentOS/7/isos/x86_64/CentOS-7-x86_64-Minimal-2009.iso"
}

variable "iso_url_centos8" {
  type    = string
  default = "http://mirror.cs.vt.edu/pub/CentOS/8/isos/x86_64/CentOS-8.1.1911-x86_64-dvd1.iso"
}

variable "openstack_allow_insecure_connection" {
  type    = string
  default = "false"
}

variable "openstack_flavor_name" {
  type    = string
  default = ""
}

variable "openstack_floating_ip_network_name" {
  type    = string
  default = ""
}

variable "openstack_network_ids" {
  type    = string
  default = ""
}

variable "openstack_security_group_names" {
  type    = string
  default = ""
}

variable "openstack_source_image_name" {
  type    = string
  default = ""
}

variable "root_volume_size" {
  type    = string
  default = "20"
}

variable "security_group_cidrs" {
  type    = string
  default = "0.0.0.0/0"
}

variable "source_ami_centos7_hvm" {
  type    = string
  default = "ami-00e87074e52e6c9f9"
}

variable "source_ami_centos8stream_hvm" {
  type    = string
  default = "ami-0ee70e88eed976a1b"
}

variable "source_ami_rhel7_hvm" {
  type    = string
  default = "ami-073955d8665a7a9e7"
}

variable "source_ami_rhel8_hvm" {
  type    = string
  default = "ami-06644055bed38ebd9"
}

variable "spel_amigen7branch" {
  type    = string
  default = "master"
}

variable "spel_amigen7manfst" {
  type    = string
  default = ""
}

variable "spel_amigen7pkggrp" {
  type    = string
  default = "core"
}

variable "spel_amigen7reponames" {
  type    = string
  default = "spel"
}

variable "spel_amigen7reposource" {
  type    = string
  default = "https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm,https://spel-packages.cloudarmor.io/spel-packages/repo/spel-release-latest-7.noarch.rpm"
}

variable "spel_amigen7rootnm" {
  type    = string
  default = ""
}

variable "spel_amigen7source" {
  type    = string
  default = "https://github.com/plus3it/AMIgen7.git"
}

variable "spel_amigen7storlay" {
  type    = string
  default = "/:rootVol:4,swap:swapVol:2,/home:homeVol:1,/var:varVol:2,/var/log:logVol:2,/var/log/audit:auditVol:100%FREE"
}

variable "spel_amigen8bootsize" {
  type    = string
  default = "20"
}

variable "spel_amigen8branch" {
  type    = string
  default = "master"
}

variable "spel_amigen8manfst" {
  type    = string
  default = ""
}

variable "spel_amigen8reponames" {
  type    = string
  default = "spel"
}

variable "spel_amigen8reposource" {
  type    = string
  default = "https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm,https://spel-packages.cloudarmor.io/spel-packages/repo/spel-release-latest-8.noarch.rpm"
}

variable "spel_amigen8rootnm" {
  type    = string
  default = ""
}

variable "spel_amigen8source" {
  type    = string
  default = "https://github.com/plus3it/AMIgen8.git"
}

variable "spel_amigen8storlay" {
  type    = string
  default = ""
}

variable "spel_amigenbuilddev" {
  type    = string
  default = "/dev/nvme0n1"
}

variable "spel_amiutilsource" {
  type    = string
  default = ""
}

variable "spel_aws_cfnbootstrap" {
  type    = string
  default = "https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz"
}

variable "spel_aws_cliv1_source" {
  type    = string
  default = "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip"
}

variable "spel_aws_cliv2_source" {
  type    = string
  default = ""
}

variable "spel_aws_ssmagent_source" {
  type    = string
  default = ""
}

variable "spel_desc_url" {
  type    = string
  default = "https://github.com/plus3it/spel"
}

variable "spel_disablefips" {
  type    = string
  default = ""
}

variable "spel_epel7release" {
  type    = string
  default = "https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm"
}

variable "spel_epel8release" {
  type    = string
  default = "https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm"
}

variable "spel_epelrepo" {
  type    = string
  default = "epel"
}

variable "spel_extrarpms" {
  type    = string
  default = "python36,spel-release,ec2-hibinit-agent,ec2-instance-connect,ec2-net-utils,https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm"
}

variable "spel_grubtmout" {
  type    = string
  default = "1"
}

variable "spel_http_proxy" {
  type    = string
  default = ""
}

variable "spel_identifier" {
  type    = string
  default = ""
}

variable "spel_usedefaultrepos" {
  type    = string
  default = "true"
}

variable "spel_version" {
  type    = string
  default = ""
}

variable "ssh_interface" {
  type    = string
  default = "public_dns"
}

variable "subnet_id" {
  type    = string
  default = ""
}

variable "vagrantcloud_token" {
  type    = string
  default = "${env("VAGRANTCLOUD_TOKEN")}"
}

variable "vagrantcloud_username" {
  type    = string
  default = ""
}
# The "legacy_isotime" function has been provided for backwards compatability, but we recommend switching to the timestamp and formatdate functions.

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/source
source "amazon-ebs" "minimal-centos-7-hvm" {
  ami_description             = "STIG-partitioned [*NOT HARDENED*], LVM-enabled, \"minimal\" CentOS 7 AMI, with updates through ${legacy_isotime("2006-01-02")}. Default username `maintuser`. See ${var.spel_desc_url}."
  ami_groups                  = "${var.ami_groups}"
  ami_name                    = "${var.spel_identifier}-${build.name}-${var.spel_version}.x86_64-gp2"
  ami_regions                 = "${var.ami_regions}"
  ami_users                   = "${var.ami_users}"
  associate_public_ip_address = true
  communicator                = "ssh"
  ena_support                 = true
  force_deregister            = "${var.ami_force_deregister}"
  instance_type               = "${var.aws_ec2_instance_type}"
  launch_block_device_mappings {
    delete_on_termination = true
    device_name           = "/dev/sda1"
    volume_size           = "${var.root_volume_size}"
    volume_type           = "gp2"
  }
  max_retries                           = 20
  region                                = "${var.aws_region}"
  source_ami                            = "${var.source_ami_centos7_hvm}"
  sriov_support                         = true
  ssh_interface                         = "${var.ssh_interface}"
  ssh_port                              = 22
  ssh_pty                               = true
  ssh_timeout                           = "60m"
  ssh_username                          = "spel"
  subnet_id                             = "${var.subnet_id}"
  temporary_security_group_source_cidrs = "${var.security_group_cidrs}"
  user_data_file                        = "${path.root}/userdata/userdata.cloud"
}

source "amazon-ebs" "minimal-centos-8stream-hvm" {
  ami_description             = "STIG-partitioned [*NOT HARDENED*], LVM-enabled, \"minimal\" CentOS Stream 8 AMI, with updates through ${legacy_isotime("2006-01-02")}. Default username `maintuser`. See ${var.spel_desc_url}."
  ami_groups                  = "${var.ami_groups}"
  ami_name                    = "${var.spel_identifier}-${build.name}-${var.spel_version}.x86_64-gp2"
  ami_regions                 = "${var.ami_regions}"
  ami_users                   = "${var.ami_users}"
  associate_public_ip_address = true
  communicator                = "ssh"
  ena_support                 = true
  force_deregister            = "${var.ami_force_deregister}"
  instance_type               = "${var.aws_ec2_instance_type}"
  launch_block_device_mappings {
    delete_on_termination = true
    device_name           = "/dev/sda1"
    volume_size           = "${var.root_volume_size}"
    volume_type           = "gp2"
  }
  max_retries                           = 20
  region                                = "${var.aws_region}"
  source_ami                            = "${var.source_ami_centos8stream_hvm}"
  sriov_support                         = true
  ssh_interface                         = "${var.ssh_interface}"
  ssh_port                              = 22
  ssh_pty                               = true
  ssh_timeout                           = "60m"
  ssh_username                          = "spel"
  subnet_id                             = "${var.subnet_id}"
  temporary_security_group_source_cidrs = "${var.security_group_cidrs}"
  user_data_file                        = "${path.root}/userdata/userdata.cloud"
}

source "amazon-ebs" "minimal-rhel-7-hvm" {
  ami_description             = "STIG-partitioned [*NOT HARDENED*], LVM-enabled, \"minimal\" RHEL 7 AMI (yum and license chargeback included) with updates through ${legacy_isotime("2006-01-02")}. Default username `maintuser`. See ${var.spel_desc_url}."
  ami_groups                  = "${var.ami_groups}"
  ami_name                    = "${var.spel_identifier}-${build.name}-${var.spel_version}.x86_64-gp2"
  ami_regions                 = "${var.ami_regions}"
  ami_users                   = "${var.ami_users}"
  associate_public_ip_address = true
  communicator                = "ssh"
  ena_support                 = true
  force_deregister            = "${var.ami_force_deregister}"
  instance_type               = "${var.aws_ec2_instance_type}"
  launch_block_device_mappings {
    delete_on_termination = true
    device_name           = "/dev/sda1"
    volume_size           = "${var.root_volume_size}"
    volume_type           = "gp2"
  }
  max_retries                           = 20
  region                                = "${var.aws_region}"
  source_ami                            = "${var.source_ami_rhel7_hvm}"
  sriov_support                         = true
  ssh_interface                         = "${var.ssh_interface}"
  ssh_port                              = 22
  ssh_pty                               = true
  ssh_timeout                           = "60m"
  ssh_username                          = "spel"
  subnet_id                             = "${var.subnet_id}"
  temporary_security_group_source_cidrs = "${var.security_group_cidrs}"
  user_data_file                        = "${path.root}/userdata/userdata.cloud"
}

source "amazon-ebs" "minimal-rhel-8-hvm" {
  ami_description             = "STIG-partitioned [*NOT HARDENED*], LVM-enabled, \"minimal\" RHEL 8 AMI, with updates through ${legacy_isotime("2006-01-02")}. Default username `maintuser`. See ${var.spel_desc_url}."
  ami_groups                  = "${var.ami_groups}"
  ami_name                    = "${var.spel_identifier}-${build.name}-${var.spel_version}.x86_64-gp2"
  ami_regions                 = "${var.ami_regions}"
  ami_users                   = "${var.ami_users}"
  associate_public_ip_address = true
  communicator                = "ssh"
  ena_support                 = true
  force_deregister            = "${var.ami_force_deregister}"
  instance_type               = "${var.aws_ec2_instance_type}"
  launch_block_device_mappings {
    delete_on_termination = true
    device_name           = "/dev/sda1"
    volume_size           = "${var.root_volume_size}"
    volume_type           = "gp2"
  }
  max_retries                           = 20
  region                                = "${var.aws_region}"
  source_ami                            = "${var.source_ami_rhel8_hvm}"
  sriov_support                         = true
  ssh_interface                         = "${var.ssh_interface}"
  ssh_port                              = 22
  ssh_pty                               = true
  ssh_timeout                           = "60m"
  ssh_username                          = "spel"
  subnet_id                             = "${var.subnet_id}"
  temporary_security_group_source_cidrs = "${var.security_group_cidrs}"
  user_data_file                        = "${path.root}/userdata/userdata.cloud"
}

source "azure-arm" "minimal-centos-7-azure-image" {
  client_id                                = "${var.azure_client_id}"
  client_secret                            = "${var.azure_client_secret}"
  cloud_environment_name                   = "${var.azure_environment}"
  communicator                             = "ssh"
  custom_data_file                         = "${path.root}/userdata/userdata.cloud"
  custom_managed_image_name                = "${var.azure_source_image_centos7}"
  custom_managed_image_resource_group_name = "${var.azure_source_image_resource_group_centos7}"
  location                                 = "${var.azure_location}"
  managed_image_name                       = "${var.spel_identifier}-${build.name}-${var.spel_version}"
  managed_image_resource_group_name        = "${var.azure_dest_resource_group}"
  os_disk_size_gb                          = "${var.root_volume_size}"
  os_type                                  = "Linux"
  private_virtual_network_with_public_ip   = "${var.azure_execute_using_public_ip}"
  ssh_port                                 = 22
  ssh_pty                                  = true
  ssh_timeout                              = "60m"
  ssh_username                             = "spel"
  subscription_id                          = "${var.azure_subscription_id}"
  use_azure_cli_auth                       = true
  virtual_network_name                     = "${var.azure_virtual_network_name}"
  virtual_network_resource_group_name      = "${var.azure_virtual_network_resource_group_name}"
  virtual_network_subnet_name              = "${var.azure_subnet_name}"
  vm_size                                  = "${var.azure_vm_size}"
}

source "azure-arm" "minimal-centos-7-azure-vhd" {
  capture_container_name                 = "images"
  capture_name_prefix                    = "${var.spel_identifier}-${var.spel_version}"
  client_id                              = "${var.azure_client_id}"
  client_secret                          = "${var.azure_client_secret}"
  cloud_environment_name                 = "${var.azure_environment}"
  communicator                           = "ssh"
  custom_data_file                       = "${path.root}/userdata/userdata.cloud"
  image_url                              = "${var.azure_source_vhd_centos7}"
  location                               = "${var.azure_location}"
  os_disk_size_gb                        = "${var.root_volume_size}"
  os_type                                = "Linux"
  private_virtual_network_with_public_ip = "${var.azure_execute_using_public_ip}"
  resource_group_name                    = "${var.azure_dest_resource_group}"
  ssh_port                               = 22
  ssh_pty                                = true
  ssh_timeout                            = "60m"
  ssh_username                           = "spel"
  storage_account                        = "${var.azure_dest_storage_account}"
  subscription_id                        = "${var.azure_subscription_id}"
  use_azure_cli_auth                     = true
  virtual_network_name                   = "${var.azure_virtual_network_name}"
  virtual_network_resource_group_name    = "${var.azure_virtual_network_resource_group_name}"
  virtual_network_subnet_name            = "${var.azure_subnet_name}"
  vm_size                                = "${var.azure_vm_size}"
}

source "azure-arm" "minimal-rhel-7-azure-image" {
  build_resource_group_name                = "${var.azure_build_resource_group_name}"
  client_id                                = "${var.azure_client_id}"
  client_secret                            = "${var.azure_client_secret}"
  cloud_environment_name                   = "${var.azure_environment}"
  communicator                             = "ssh"
  custom_data_file                         = "${path.root}/userdata/userdata.cloud"
  custom_managed_image_name                = "${var.azure_source_image_rhel7}"
  custom_managed_image_resource_group_name = "${var.azure_source_image_resource_group_rhel7}"
  location                                 = "${var.azure_location}"
  managed_image_name                       = "${var.spel_identifier}-${build.name}-${var.spel_version}"
  managed_image_resource_group_name        = "${var.azure_dest_resource_group}"
  os_disk_size_gb                          = "${var.root_volume_size}"
  os_type                                  = "Linux"
  private_virtual_network_with_public_ip   = "${var.azure_execute_using_public_ip}"
  ssh_port                                 = 22
  ssh_pty                                  = true
  ssh_timeout                              = "60m"
  ssh_username                             = "spel"
  subscription_id                          = "${var.azure_subscription_id}"
  use_azure_cli_auth                       = true
  virtual_network_name                     = "${var.azure_virtual_network_name}"
  virtual_network_resource_group_name      = "${var.azure_virtual_network_resource_group_name}"
  virtual_network_subnet_name              = "${var.azure_subnet_name}"
  vm_size                                  = "${var.azure_vm_size}"
}

source "openstack" "minimal-centos-7-openstack-image" {
  flavor                  = "${var.openstack_flavor_name}"
  floating_ip_network     = "${var.openstack_floating_ip_network_name}"
  image_name              = "${var.spel_identifier}-${build.name}-${var.spel_version}.x86_64"
  insecure                = "${var.openstack_allow_insecure_connection}"
  networks                = "${var.openstack_network_ids}"
  security_groups         = "${var.openstack_security_group_names}"
  source_image_name       = "${var.openstack_source_image_name}"
  ssh_port                = 22
  ssh_timeout             = "30m"
  ssh_username            = "spel"
  use_blockstorage_volume = "false"
  user_data_file          = "${path.root}/userdata/userdata.cloud"
}

source "virtualbox-iso" "minimal-centos-7-virtualbox" {
  boot_command            = ["<esc><wait>", "linux ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/ks.centos7.minimal.cfg VAGRANT", "<enter><wait>"]
  boot_wait               = "10s"
  disk_size               = 20480
  format                  = "ova"
  guest_additions_path    = "VBoxGuestAdditions_{{ .Version }}.iso"
  guest_os_type           = "RedHat_64"
  headless                = true
  http_directory          = "${path.root}/kickstarts"
  iso_checksum            = "file:http://mirror.cs.vt.edu/pub/CentOS/7/isos/x86_64/sha256sum.txt"
  iso_url                 = "${var.iso_url_centos7}"
  output_directory        = ".spel/${var.spel_version}/${var.spel_identifier}-${build.name}"
  shutdown_command        = "echo '/sbin/halt -h -p' > shutdown.sh; echo 'vagrant'|sudo -S bash 'shutdown.sh'"
  ssh_password            = "vagrant"
  ssh_port                = 22
  ssh_timeout             = "10000s"
  ssh_username            = "vagrant"
  virtualbox_version_file = ".vbox_version"
  vm_name                 = "${var.spel_identifier}-${build.name}-${var.spel_version}"
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/build
build {
  sources = ["source.amazon-ebs.minimal-centos-7-hvm", "source.amazon-ebs.minimal-centos-8stream-hvm", "source.amazon-ebs.minimal-rhel-7-hvm", "source.amazon-ebs.minimal-rhel-8-hvm", "source.azure-arm.minimal-centos-7-azure-image", "source.azure-arm.minimal-centos-7-azure-vhd", "source.azure-arm.minimal-rhel-7-azure-image", "source.openstack.minimal-centos-7-openstack-image", "source.virtualbox-iso.minimal-centos-7-virtualbox"]

  provisioner "file" {
    destination = "/tmp/retry.sh"
    only        = ["minimal-centos-7-virtualbox"]
    source      = "${path.root}/scripts/retry.sh"
  }

  provisioner "shell" {
    execute_command = "echo 'vagrant'|sudo -S -E /bin/sh -ex '{{ .Path }}'"
    only            = ["minimal-centos-7-virtualbox"]
    scripts         = ["${path.root}/scripts/base.sh", "${path.root}/scripts/virtualbox.sh", "${path.root}/scripts/vmware.sh", "${path.root}/scripts/vagrant.sh", "${path.root}/scripts/dep.sh", "${path.root}/scripts/cleanup.sh", "${path.root}/scripts/zerodisk.sh"]
  }

  provisioner "shell" {
    execute_command = "{{ .Vars }} sudo -E /bin/sh -ex '{{ .Path }}'"
    inline          = ["/usr/bin/cloud-init status --wait", "setenforce 0", "yum -y update"]
    only            = ["minimal-centos-7-hvm", "minimal-centos-7-openstack-image", "minimal-rhel-7-hvm", "minimal-centos-7-azure-vhd", "minimal-centos-7-azure-image", "minimal-centos-8stream-hvm", "minimal-rhel-7-azure-image", "minimal-rhel-8-hvm"]
  }

  provisioner "shell" {
    execute_command     = "{{ .Vars }} sudo -E /bin/sh '{{ .Path }}'"
    expect_disconnect   = true
    only                = ["minimal-centos-7-hvm", "minimal-centos-7-openstack-image", "minimal-rhel-7-hvm", "minimal-centos-7-azure-vhd", "minimal-centos-7-azure-image", "minimal-centos-8stream-hvm", "minimal-rhel-7-azure-image", "minimal-rhel-8-hvm"]
    scripts             = ["${path.root}/scripts/pivot-root.sh"]
    start_retry_timeout = "15m"
  }

  provisioner "shell" {
    execute_command = "{{ .Vars }} sudo -E /bin/sh -ex '{{ .Path }}'"
    inline          = ["echo Restarting systemd", "systemctl daemon-reexec", "echo Killing processes locking /oldroot", "fuser -vmk /oldroot"]
    only            = ["minimal-centos-7-hvm", "minimal-centos-7-openstack-image", "minimal-rhel-7-hvm", "minimal-centos-7-azure-vhd", "minimal-centos-7-azure-image", "minimal-centos-8stream-hvm", "minimal-rhel-7-azure-image", "minimal-rhel-8-hvm"]
  }

  provisioner "shell" {
    execute_command = "{{ .Vars }} sudo -E /bin/sh -ex '{{ .Path }}'"
    inline          = ["echo Unmounting /oldroot", "test $(grep -c /oldroot /proc/mounts) -eq 0 || umount /oldroot", "echo Unmounting /boot", "test $(grep -c /boot /proc/mounts) -eq 0 || umount /boot", "echo Unmounting /mnt", "test $(grep -c /mnt /proc/mounts) -eq 0 || umount /mnt"]
    only            = ["minimal-centos-7-hvm", "minimal-centos-7-openstack-image", "minimal-rhel-7-hvm", "minimal-centos-7-azure-vhd", "minimal-centos-7-azure-image", "minimal-rhel-7-azure-image"]
  }

  provisioner "shell" {
    execute_command = "{{ .Vars }} sudo -E /bin/sh -ex '{{ .Path }}'"
    inline          = ["echo Unmounting /oldroot", "test $( grep -c /oldroot /proc/mounts ) -eq 0 || umount /oldroot"]
    only            = ["minimal-centos-8stream-hvm", "minimal-rhel-8-hvm"]
  }

  provisioner "shell" {
    environment_vars = ["SPEL_AMIGENBRANCH=${var.spel_amigen7branch}", "SPEL_AMIGENBUILDDEV=${var.spel_amigenbuilddev}", "SPEL_AMIGENCHROOT=/mnt/ec2-root", "SPEL_AMIGENMANFST=${var.spel_amigen7manfst}", "SPEL_AMIGENPKGGRP=${var.spel_amigen7pkggrp}", "SPEL_AMIGENREPOS=${var.spel_amigen7reponames}", "SPEL_AMIGENREPOSRC=${var.spel_amigen7reposource}", "SPEL_AMIGENROOTNM=${var.spel_amigen7rootnm}", "SPEL_AMIGENSOURCE=${var.spel_amigen7source}", "SPEL_AMIGENSTORLAY=${var.spel_amigen7storlay}", "SPEL_AMIGENVGNAME=VolGroup00", "SPEL_AMIUTILSSOURCE=${var.spel_amiutilsource}", "SPEL_AWSCFNBOOTSTRAP=${var.spel_aws_cfnbootstrap}", "SPEL_AWSCLIV1SOURCE=${var.spel_aws_cliv1_source}", "SPEL_AWSCLIV2SOURCE=${var.spel_aws_cliv2_source}", "SPEL_BOOTLABEL=/boot", "SPEL_BUILDDEPS=lvm2 parted yum-utils unzip git", "SPEL_BUILDNAME=${build.name}", "SPEL_CLOUDPROVIDER=aws", "SPEL_EPELRELEASE=${var.spel_epel7release}", "SPEL_EPELREPO=${var.spel_epelrepo}", "SPEL_EXTRARPMS=${var.spel_extrarpms}", "SPEL_FIPSDISABLE=${var.spel_disablefips}", "SPEL_GRUBTMOUT=${var.spel_grubtmout}", "SPEL_USEDEFAULTREPOS=${var.spel_usedefaultrepos}"]
    execute_command  = "{{ .Vars }} sudo -E /bin/sh '{{ .Path }}'"
    only             = ["minimal-centos-7-hvm", "minimal-rhel-7-hvm"]
    scripts          = ["${path.root}/scripts/amigen7-build.sh"]
  }

  provisioner "shell" {
    environment_vars = ["SPEL_AMIGENBRANCH=${var.spel_amigen7branch}", "SPEL_AMIGENBUILDDEV=/dev/vda", "SPEL_AMIGENCHROOT=/mnt/ec2-root", "SPEL_AMIGENMANFST=${var.spel_amigen7manfst}", "SPEL_AMIGENPKGGRP=${var.spel_amigen7pkggrp}", "SPEL_AMIGENREPOS=${var.spel_amigen7reponames}", "SPEL_AMIGENREPOSRC=${var.spel_amigen7reposource}", "SPEL_AMIGENSOURCE=${var.spel_amigen7source}", "SPEL_AMIGENSTORLAY=${var.spel_amigen7storlay}", "SPEL_AMIGENVGNAME=VolGroup00", "SPEL_AMIUTILSSOURCE=${var.spel_amiutilsource}", "SPEL_AWSCFNBOOTSTRAP=${var.spel_aws_cfnbootstrap}", "SPEL_AWSCLIV1SOURCE=${var.spel_aws_cliv1_source}", "SPEL_AWSCLIV2SOURCE=${var.spel_aws_cliv2_source}", "SPEL_BOOTLABEL=/boot", "SPEL_BUILDDEPS=lvm2 parted yum-utils unzip git", "SPEL_BUILDNAME=${build.name}", "SPEL_CLOUDPROVIDER=openstack", "SPEL_EPELRELEASE=${var.spel_epel7release}", "SPEL_EPELREPO=${var.spel_epelrepo}", "SPEL_EXTRARPMS=${var.spel_extrarpms}", "SPEL_FIPSDISABLE=${var.spel_disablefips}", "SPEL_GRUBTMOUT=${var.spel_grubtmout}", "SPEL_USEDEFAULTREPOS=${var.spel_usedefaultrepos}"]
    execute_command  = "{{ .Vars }} sudo -E /bin/sh '{{ .Path }}'"
    only             = ["minimal-centos-7-openstack-image"]
    scripts          = ["${path.root}/scripts/amigen7-build.sh"]
  }

  provisioner "shell" {
    environment_vars = ["SPEL_AMIGENBRANCH=${var.spel_amigen8branch}", "SPEL_AMIGENBOOTSIZE=17m", "SPEL_AMIGENBUILDDEV=${var.spel_amigenbuilddev}", "SPEL_AMIGENCHROOT=/mnt/ec2-root", "SPEL_AMIGENFSTYPE=${var.spel_amigenfstype}", "SPEL_AMIGENICNCTURL=${var.aws_instance_connect}", "SPEL_AMIGENMANFST=${var.spel_amigen8manfst}", "SPEL_AMIGENREPOS=${var.spel_amigen8reponames}", "SPEL_AMIGENREPOSRC=${var.spel_amigen8reposource}", "SPEL_AMIGENROOTNM=${var.spel_amigen8rootnm}", "SPEL_AMIGEN8SOURCE=${var.spel_amigen8source}", "SPEL_AMIGENSSMAGENT=${var.spel_aws_ssmagent_source}", "SPEL_AMIGENSTORLAY=${var.spel_amigen8storlay}", "SPEL_AMIGENVGNAME=RootVG", "SPEL_AWSCFNBOOTSTRAP=${var.spel_aws_cfnbootstrap}", "SPEL_AWSCLIV1SOURCE=${var.spel_aws_cliv1_source}", "SPEL_AWSCLIV2SOURCE=${var.spel_aws_cliv2_source}", "SPEL_CLOUDPROVIDER=aws", "SPEL_EPELRELEASE=${var.spel_epel8release}", "SPEL_EPELREPO=${var.spel_epelrepo}", "SPEL_EXTRARPMS=${var.spel_extrarpms}", "SPEL_FIPSDISABLE=true", "SPEL_GRUBTMOUT=${var.spel_grubtmout}", "SPEL_USEDEFAULTREPOS=${var.spel_usedefaultrepos}"]
    execute_command  = "{{ .Vars }} sudo -E /bin/sh '{{ .Path }}'"
    only             = ["minimal-centos-8stream-hvm", "minimal-rhel-8-hvm"]
    scripts          = ["${path.root}/scripts/amigen8-build.sh"]
  }

  provisioner "shell" {
    environment_vars = ["SPEL_AMIGENBRANCH=${var.spel_amigen7branch}", "SPEL_AMIGENBUILDDEV=/dev/sda", "SPEL_AMIGENCHROOT=/mnt/ec2-root", "SPEL_AMIGENREPOS=${var.spel_amigen7reponames}", "SPEL_AMIGENREPOSRC=${var.spel_amigen7reposource}", "SPEL_AMIGENSOURCE=${var.spel_amigen7source}", "SPEL_AMIGENSTORLAY=${var.spel_amigen7storlay}", "SPEL_AMIGENVGNAME=VolGroup00", "SPEL_AMIUTILSSOURCE=${var.spel_amiutilsource}", "SPEL_AWSCFNBOOTSTRAP=${var.spel_aws_cfnbootstrap}", "SPEL_AWSCLIV1SOURCE=${var.spel_aws_cliv1_source}", "SPEL_AWSCLIV2SOURCE=${var.spel_aws_cliv2_source}", "SPEL_BOOTLABEL=/boot", "SPEL_BUILDDEPS=lvm2 parted yum-utils unzip git", "SPEL_BUILDNAME=${build.name}", "SPEL_CLOUDPROVIDER=azure", "SPEL_EPELRELEASE=${var.spel_epel7release}", "SPEL_EPELREPO=${var.spel_epelrepo}", "SPEL_EXTRARPMS=${var.spel_extrarpms}", "SPEL_FIPSDISABLE=${var.spel_disablefips}", "SPEL_GRUBTMOUT=${var.spel_grubtmout}", "SPEL_HTTP_PROXY=${var.spel_http_proxy}", "SPEL_USEDEFAULTREPOS=${var.spel_usedefaultrepos}"]
    execute_command  = "{{ .Vars }} sudo -E /bin/sh '{{ .Path }}'"
    only             = ["minimal-centos-7-azure-vhd", "minimal-centos-7-azure-image", "minimal-rhel-7-azure-image"]
    scripts          = ["${path.root}/scripts/amigen7-build.sh"]
  }

  provisioner "file" {
    destination = ".spel/${var.spel_version}/${var.spel_identifier}-${build.name}.manifest.txt"
    direction   = "download"
    source      = "/tmp/manifest.txt"
  }

  provisioner "shell" {
    execute_command = "chmod +x {{ .Path }}; {{ .Vars }} sudo -E sh -ex '{{ .Path }}'"
    inline          = ["chkconfig waagent on", "/usr/sbin/waagent -force -deprovision && export HISTSIZE=0 && sync"]
    only            = ["minimal-centos-7-azure-vhd", "minimal-centos-7-azure-image", "minimal-rhel-7-azure-image"]
    skip_clean      = true
  }

  post-processor "artifice" {
    files = [".spel/${var.spel_version}/${var.spel_identifier}-${build.name}.manifest.txt"]
  }
  post-processors {
    post-processor "vagrant" {
      keep_input_artifact = false
      compression_level   = 9
      only                = ["minimal-centos-7-virtualbox"]
      output              = ".spel/${var.spel_version}/${var.spel_identifier}-{{ .BuildName }}.box"
    }
    post-processor "vagrant-cloud" {
      access_token        = "${var.vagrantcloud_token}"
      box_tag             = "${var.vagrantcloud_username}/${var.spel_identifier}-minimal-centos-7"
      only                = ["minimal-centos-7-virtualbox"]
      version             = " ${var.spel_version} "
      version_description = "STIG-partitioned, LVM-enabled, \"minimal\" CentOS 7 image, with updates through ${legacy_isotime("2006-01-02")}. Default username `maintuser`. For details, see https://github.com/plus3it/spel."
    }
  }
  post-processor "manifest" {
    output = ".spel/${var.spel_version}/packer-manifest.json"
  }
}
